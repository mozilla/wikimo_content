<table>
  <tr>
    <td style="min-width: 25em;">__TOC__</td>
    <td style="vertical-align: top; padding-left: 1em;">
The goal of this document is to help operational teams with the configuration of Jenkins, a continuous integration/delivery application.

All Mozilla sites and deployment should follow the recommendations below.  The Enterprise Information Security (Infosec, formerly
OpSec) team maintains this document as a reference guide for operational teams.

Updates to this page should be submitted to the [https://github.com/mozilla/wikimo_opsec/ source repository on github].
Changes are detailed in the [https://github.com/mozilla/wikimo_opsec/commits/master commit history].

<span style="float: right; padding-top: 3em;">[[File:OpSec.png|300px]]</span>
    </td>
  </tr>
</table>

= Jenkins-CI =
== HTTP ==
=== Transport Encryption ===
By default, the Jenkins web administration console is served over HTTP.  This allows a MiTM attacker to steal Jenkins administrative credentials.  To combat this, all Jenkins web applications should be served over HTTPS using a certificate from a trusted certificate authority.  If purchasing an certificate is deemed cost prohibitive, certificates can be obtained **FREE** from [https://letsencrypt.org/ Let's Encrypt].

Additional configuration is required on the server instance to control the various TLS configuration settings that the Jenkins instance will support.  Any Jenkins installations should implement a MODERN TLS configuration, as defined by the [https://wiki.mozilla.org/Security/Server_Side_TLS Mozilla Server Side TLS guide].  Mozilla also provides an [https://mozilla.github.io/server-side-tls/ssl-config-generator/ SSL configuration generator] to assist you in building of a MODERN configuration for your chosen web server to host Jenkins with.

Additionally, [https://github.com/jvehent/cipherscan cipherscan] can be used to confirm that the TLS configuration settings are set to the correct levels.

=== Sensitive Path Restrictions ===
There are a number of known URL paths that expose attack surface on a Jenkins installation that you may not want, but are not often configurable within the application.  Depending on your specific use case of Jenkins, you may choose to block one or more of these paths to reduce this attack surface, which are commonly used by attackers to exploit configuration flaws and/or gather information that could be later used to assist in other types of attacks.

Please note that the following paths are relative to the Jenkins application root.  So if the Jenkins installation is reachable at /jenkins instead of the default /, you may need to make substitutions accordingly:

  ./api
  ./asynchPeople
  ./cli
  ./credential-store
  ./jnlpJars
  ./job/[JOB_NAME]/[BUILD_NUMBER]/injectedEnvVars/
  ./quietDown
  ./restart
  ./script
  ./subversion
  ./systemInfo
  ./user/jenkins
  ./view/All/newJob
  ./whoAmI

Such path restrictions can be implemented in any modern web server technology.

nginx Example:

  # Restrict access to the following paths
  location ^~ /(api|asynchPeople|cli|credential-store|jnlpJars|quietDown|restart|script|systemInfo|subversion|user/jenkins|view/All/newJob|whoAmI) {
    deny    all;
  }

  # Restrict access to all API paths
  location ~* ^.+/api.+$ {
    deny    all;
  }

  # Restrict access to injectedEnvVars paths
  location ~* ^.+/injectedEnvVars/$ {
    deny    all;
  }

Apache HTTPD Example:

  # Restrict access to the following paths
  <DirectoryMatch "^/(api|asynchPeople|cli|credential-store|jnlpJars|quietDown|restart|script|systemInfo|subversion|user/jenkins|view/All/newJob|whoAmI)">
    Deny from all
  </DirectoryMatch>

  # Restrict access to all API paths
  <DirectoryMatch "^.+api.+$">
    Deny from all
  </DirectoryMatch>

  # Restrict access to injectedEnvVars paths
  <DirectoryMatch "^.+/injectedEnvVars/$">
    Deny from all
  </DirectoryMatch>

It is recommended that you start with the full list of restricted paths and then remove restrictions as necessary to fit your desired use case.  Additionally, you may also consider restricting some paths by source IP to provide additional paths for users sourcing from specific source networks, such as those originating from an internal/VPN network.

=== Password Masking ===
In the configuration of a Jenkins job, you may have a need to supply a password/api key.  In these cases, it's recommended that under the "Build Environment" section that these environment variables be introduced via the "Inject passwords to the build as environment variables" section and not the "Inject environment variables to the build process" section.  As part of this subsection of the configuration, there is an additional checkbox called "Mask password parameters", which should be checked to ensure that these values are not leaked (plain-text -or- cipher-text) via the ./job/[job_name]/[build_number]/injectedEnvVars/ path pattern.

See the above section on "Sensitive Path Restrictions" to limit the impact should a Jenkins user accidentally uncheck password masking for any reason.

=== Authentication ===
By default, Jenkins does not require authentication, which means that anyone with access to the web ui (assuming the default authorization strategy - mentioned below) can fully manage the Jenkins instance.  At a minimum, all Jenkins installations should use at least the Jenkins user database strategy before it's accessible on private or public networks.

For production quality authentication security Jenkins should be integrated into some form centralized authentication system.  The reason for doing so is to mitigate the risk of another Jenkins user learning your authentication credentials, which are stored on the Jenkins master node in an encrypted, but easily reversible format (ie. AES-128 cipher-text with associated key material located in $JENKINS_HOME).  The other reason for going with centralized authentication is that it's simply easier to manage the provisioning and de-provisioning of users and their accesses.

The following are recommended methods for centralized authentication with Jenkins:

* [https://wiki.jenkins-ci.org/display/JENKINS/LDAP+Plugin LDAP Authentication]
* [https://wiki.jenkins-ci.org/display/JENKINS/Google+Login+Plugin Google Authentication]
* [https://wiki.jenkins-ci.org/display/JENKINS/Github+OAuth+Plugin GitHub Authentication]

Details are present in each plugin mechanism for how to configure your preferred mechanism.

For added security, some of these plugins support [https://en.wikipedia.org/wiki/Multi-factor_authentication multi-factor authentication], which significantly reduces the risk of compromise in the case of user credential leakage.  In cases where the Jenkins instance is producing build artifacts which are meant for consumption or has particularly sensitive secrets (API keys, passwords, signing keys, etc.) being stored location, multi-factor authentication is highly recommended.

=== Authorization ===
Jenkins comes with a variety of stock authorization strategies, which include the following:

* Anyone can do anything (default)
* Legacy mode
* Logged-in users can do anything
* Matrix-based security
* Project-based Matrix Authorization Strategy

The default Jenkins authorization strategy ("Anyone can do anything") is designed for setup purposes only as it presents significant risk to the Jenkins installation by allowing any anonymous user to administer and view any secrets entrusted to the Jenkins instance as well as remote command execution vulnerabilities via the job configuration interface.  Any system not removed from this state before being hosted in a production location should assume that the system is compromised.

It's imperative that every Jenkins instance use at a minimum the "Logged-in users can do anything" for small groups (< 3 administrator only users) and [https://wiki.jenkins-ci.org/display/JENKINS/Matrix-based+security Matrix-based security] for any instance where users of different privilege-levels need to co-exist (ie. administrators and qa personnel) as it provides the most options for limiting user access to only required roles.

Note: When using a Matrix-based security authorization strategy, any user that is given "job" permission on a job that runs on the master node will have access to the $JENKINS_HOME directory, which would allow that user to privilege escalate to full administrator.  When giving users "job" permission or above to a job, make sure that that job is run on a slave node and that slave node should build any other jobs for which the user does not already have the "job" permission for to prevent lateral movement on the slave node.

If you are using GitHub authentication, it also supports an alternative authorization strategy that allows you provide/restrict GitHub user and group access.

=== CSRF Protection ===
Jenkins does provide a CSRF configuration with in Manage Jenkins => Configure Global Security as a checkbox called "Prevent Cross Site Request Forgery exploits".  Unfortunately, this feature, which is aimed at preventing an attacker from executing CSRF/XSRF exploit, also comes with some short falls including additional work to use the remote api and limited testing/compatibility support with plugins.  It is recommended that this feature be enabled at first, but if it becomes an obstacle and conflicts with one of the above issues, then it can be disabled.

=== JNLP Slave Agents ===
Jenkins is by default enabled with JNLP slave agent support on TCP port 50000.  This allows slave agents to communicate back to the master Jenkins node.  If you are using JNLP slave agents, disable this feature, which is configurable via http://192.168.99.100:8080/configureSecurity/ when the "Enable security" box is checked.

=== Jenkins CLI ===
Jenkins supports a [https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+CLI CLI functionality], which allows you to perform a number of administrative actions on Jenkins via TCP port 49187 using the Jenkins CLI client.  It is highly recommended that this service be disabled if it is not being used because at certain versions of Jenkins it allows unauthenticated remote code execution (aka: administrative control) on the Jenkins instance.


== SSH ==

=== Authentication ===
All remote authentication to a Jenkins SSH service should be restricted to no less than SSH key-based authentication or dual-factor authentication where possible, as defined in the [https://wiki.mozilla.org/Security/Guidelines/OpenSSH Mozilla OpenSSH Guide].

Access to the root user should be prohibited.  This can be done via the following addition to sshd_config:

  PermitRootLogin no

=== Transport Encryption ===
Default OpenSSH configurations tend to provide reasonably good transport encryption security.  However, there is still room to further lock down a Jenkins openssh configuration and incentive to do so considering the critical functions and secrets we trust Jenkins with.

Any Jenkins installations should implement a MODERN OpenSSH Server configuration, as defined in the [https://wiki.mozilla.org/Security/Guidelines/OpenSSH Mozilla OpenSSH Guide].  Additionally, any SSH clients (likely developer workstations) connecting to the SSH server on Jenkins installations should implement a MODERN OpenSSH client configuration, also documented in the [https://wiki.mozilla.org/Security/Guidelines/OpenSSH Mozilla OpenSSH Guide].

Additionally, [https://github.com/claudijd/ssh_scan ssh_scan] can be used to confirm that the SSH configuration settings are set to the correct levels.

=== Tunneling ===
SSH tunneling can be used in a couple different instances to limit attack surface on your Jenkins installation.  This is often done in a couple of scenarios.

* To provide access to Jenkins installation paths that are bound to a routable IP, which present a limited HTTP attack surface, except to users which have already authenticated to the SSH service.
* To provide connectivity to Jenkins installations that are bound to the loopback interface on the service, which present no HTTP attack surface, except to users which have already authenticated to the SSH service.

When allowing SSH access to Jenkins users for the purpose of tunneling, you may also need to consider whether those users require full SSH access, or just tunneling configuration.

To enable tunneling in SSH, simply add the following to the sshd_config file"

  AllowTcpForwarding yes

To restrict a user's ability to obtain a shell (if relevant), simply create an account that prevents access to a shell like /sbin/nologin:

  groupadd tunnel_users
  useradd -g tunnel_users -s /usr/sbin/nologin -m -d /home/jsmith_tunnel jsmith_tunnel

As an SSH client, the user can now tunnel to the localhost bound interface and access the Jenkins interface on 127.0.0.1:8080:

  ssh -L 8080:localhost:8080 jsmith_tunnel@192.168.1.1

You can also refer to the SSH agent forwarding section in the [https://wiki.mozilla.org/Security/Guidelines/OpenSSH#SSH_agent_forwarding Mozilla OpenSSH Guide] for additional hardening guidance on SSH agent tunneling.

== Architecture ==
*TODO* - Discuss the trust model in Jenkins a bit further

=== Network Access ===
It's highly recommended you run Jenkins behind some form of Firewall capability whether it be local IPTables rules or some other sophisticated network infrastructure that supports some form of network ACL control.

A good default to start with would include something like this:

* Allow inbound TCP port 443 (assuming HTTPS interface is hosted on default port)
* Allow inbound TCP port 22 (assuming SSH interface is hosted on default port)
* Implicitly Deny All other Traffic

This default works quite well as a secondary control to limit exposure of services that the Jenkins server may host either during the course of executing a job or native services to Jenkins itself (CLI Access and JNLP Slave access).  If these services are needed for interoperability purposes, do so explicitly with specific source and destination IP addresses.

Lastly, for installations without a need for a public presence or with higher security needs may also consider requiring either VPN access or SSH access with tunneling before being able to connect to any hosted Jenkins services.  The benefit of doing so significantly reduces the Jenkins attack surface.

=== Job Isolation ===
By default, Jenkins provides no job isolation.  This means that a job running on a default Jenkins installation running on the master node (via the default configuration) has the full ability to escape the job workspace and traverse into other folders accessible to the jenkins user including that of $JENKINS_HOME.  If a malicious user/code where to attain READ access to $JENKINS_HOME, all secrets stored within that node (including administrator usernames/passwords, private keys, API tokens, etc) should be considered compromised.

To achieve proper job isolation, there a lot of options available (docker, VM, AMI's), but they all essentially boil down to running jobs on a unique build target that starts from a immutable environment than cannot be accessed directly or influenced by other jobs.  This no only encourages more stable/reliable builds, but it also prevents lateral movement from Job A to Job B as well as prevents access to $JENKINS_HOME.



*TODO* - Don't run anything on the master node, use slaves and containers for better OS isolation and repeatability
*TODO* - Don't run different trust levels on the same build target (ie. test/build/sign/push)

=== Secret Management ===
*TODO*


== Maintenance ==

=== Advisory Notification ===
It's good practice to subscribe to the Jenkins advisories mailing list to be kept abreast of security updates for Jenkins.  There are two important types you'll want to keep an eye out; pre-notifications (a warning that at advisory is coming soon) and the actual advisory notification (patch now).  Both of these items will assist with you in planning for and executing upgrades to protect your Jenkins instances.

* [https://wiki.jenkins-ci.org/display/JENKINS/Mailing+Lists Mailing List]
* [http://feeds.feedburner.com/jenkins-security-advisories RSS Feed]

=== Updates ===
There are times when you'll need to manage updates for your Jenkins instances:

* Core (this is the Jenkins instance version itself - version seen in lower right hand corner of web interface)
* Plugins (these are the add-ons/extensions that are used to enhance/extend the Jenkins experience)

For Jenkins installs deployed via Debian/Ubuntu packaged installs, a simple "apt-get update; apt-get install jenkins" is sufficient to update Jenkins core.  For other installation types, you may have the option to upgrade core via the Manage Jenkins page.  Consider upgrading core as soon as the next release is available (See above for notifications)

Additionally, plugins are upgraded via the plugin manager (./pluginManager/) within the Jenkins UI.  Consider upgrading plugins after every core update.  It's important to recognize that plugins may not get the same level of testing as core for security updates and depending on the plugin maintainer some plugins may fail to work temporarily after an upgrade and require a core revert to keep the plugin functioning.  During these scenarios you may be forced to weigh the trade-offs between an unpatched security vulnerability and an broken plugin.

=== Backups ===
*TODO - perform regular backups and test restores of Jenkins installations to make sure you can restore if you run into a bad Jenkins upgrade or need to restore in the event of a compromise.

=== Disabled Job Pruning ===
From time to time, a new job will supersede an old job as you make improvements to the jobs within your Jenkins instance.  It's quite common that during this early transition from old to new the old job will be disabled and not removed.  On a periodic schedule, review all the disabled jobs within your Jenkins instance and determine if they can be removed yet.  The reasons we remove/prune disabled jobs are the following:

* Legacy log retention that include sensitive information (that newer jobs may be protected against)
* Legacy environment/parameter retention that include sensitive information (that newer jobs may be protected against)
* Older jobs may have depended on secrets that you no longer need to store locally in your Jenkins installation (perhaps you abstracted them away from Jenkins for security reasons)

There have also been observed occurrences where disabled jobs are not provided the same level of security protections as active jobs.  One specific example was with password masking, which was not applied to disabled jobs in older Jenkins instance runs even after an instance upgrade.

=== Job/Security Scope Creep ===
As Jenkins instances age, it's relatively common that they take on more and more responsibilities.  It's no uncommon that a Jenkins system is setup for testing purposes and the result of the successful test, it becomes a production system.  It's important to be mindful of this to be on the look out for Jenkins instances that started out very low-risk to the business and eventually evolved into the primary build pipeline.  It's important to maintain and inventory of your Jenkins installations and try to confine each instance to a specific group of tasks or project and do regular check-ups for "one offs".

Doing this verification of scope creep on a regular basis (or strictly controlling who can create new jobs) will help ensure the maintenance of the Jenkins installation doesn't get too bloated with various user requirements, plugins, and need for user SSH accesses with varying security requirements.

In cases where you do find a significant change in job scope, it may be worth creating a dedicated Jenkins instance for that function -OR- a re-review of the security requirements for the entire Jenkins instance.

= Appendixes =
== Reference documents ==

* [https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+Best+Practices]
* [https://wiki.jenkins-ci.org/display/JENKINS/Securing+Jenkins]
* [https://wiki.mozilla.org/Security/Server_Side_TLS Server Side TLS]
* [https://wiki.mozilla.org/Security/Guidelines/OpenSSH]
* [https://speakerdeck.com/javuto/security-at-scale-2015-building-open-source-software-for-security]
* [https://speakerdeck.com/claudijd/attacking-cloud-services-with-source-code]
* [https://cloudbees.zendesk.com/hc/en-us/articles/204987814-How-to-upgrade-Jenkins]
* [https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+CLI]
* [https://wiki.jenkins-ci.org/display/JENKINS/Security+Advisories]
